/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../common';

export interface OperatorAllowlistEnforcedInterface extends Interface {
  getFunction(nameOrSignature: 'operatorAllowlist'): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'OperatorAllowlistRegistryUpdated'): EventFragment;

  encodeFunctionData(functionFragment: 'operatorAllowlist', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'operatorAllowlist', data: BytesLike): Result;
}

export namespace OperatorAllowlistRegistryUpdatedEvent {
  export type InputTuple = [oldRegistry: AddressLike, newRegistry: AddressLike];
  export type OutputTuple = [oldRegistry: string, newRegistry: string];
  export interface OutputObject {
    oldRegistry: string;
    newRegistry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OperatorAllowlistEnforced extends BaseContract {
  connect(runner?: ContractRunner | null): OperatorAllowlistEnforced;
  waitForDeployment(): Promise<this>;

  interface: OperatorAllowlistEnforcedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  operatorAllowlist: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'operatorAllowlist'): TypedContractMethod<[], [string], 'view'>;

  getEvent(
    key: 'OperatorAllowlistRegistryUpdated',
  ): TypedContractEvent<
    OperatorAllowlistRegistryUpdatedEvent.InputTuple,
    OperatorAllowlistRegistryUpdatedEvent.OutputTuple,
    OperatorAllowlistRegistryUpdatedEvent.OutputObject
  >;

  filters: {
    'OperatorAllowlistRegistryUpdated(address,address)': TypedContractEvent<
      OperatorAllowlistRegistryUpdatedEvent.InputTuple,
      OperatorAllowlistRegistryUpdatedEvent.OutputTuple,
      OperatorAllowlistRegistryUpdatedEvent.OutputObject
    >;
    OperatorAllowlistRegistryUpdated: TypedContractEvent<
      OperatorAllowlistRegistryUpdatedEvent.InputTuple,
      OperatorAllowlistRegistryUpdatedEvent.OutputTuple,
      OperatorAllowlistRegistryUpdatedEvent.OutputObject
    >;
  };
}
