/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers6';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface MintableInterface extends Interface {
  getFunction(
    nameOrSignature: 'blueprints' | 'imx' | 'mintFor' | 'owner' | 'renounceOwnership' | 'transferOwnership',
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'AssetMinted' | 'OwnershipTransferred'): EventFragment;

  encodeFunctionData(functionFragment: 'blueprints', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'imx', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintFor', values: [AddressLike, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: 'blueprints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'imx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
}

export namespace AssetMintedEvent {
  export type InputTuple = [to: AddressLike, id: BigNumberish, blueprint: BytesLike];
  export type OutputTuple = [to: string, id: bigint, blueprint: string];
  export interface OutputObject {
    to: string;
    id: bigint;
    blueprint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Mintable extends BaseContract {
  connect(runner?: ContractRunner | null): Mintable;
  waitForDeployment(): Promise<this>;

  interface: MintableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  blueprints: TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;

  imx: TypedContractMethod<[], [string], 'view'>;

  mintFor: TypedContractMethod<
    [user: AddressLike, quantity: BigNumberish, mintingBlob: BytesLike],
    [void],
    'nonpayable'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'blueprints'): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;
  getFunction(nameOrSignature: 'imx'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'mintFor',
  ): TypedContractMethod<[user: AddressLike, quantity: BigNumberish, mintingBlob: BytesLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'AssetMinted',
  ): TypedContractEvent<AssetMintedEvent.InputTuple, AssetMintedEvent.OutputTuple, AssetMintedEvent.OutputObject>;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    'AssetMinted(address,uint256,bytes)': TypedContractEvent<
      AssetMintedEvent.InputTuple,
      AssetMintedEvent.OutputTuple,
      AssetMintedEvent.OutputObject
    >;
    AssetMinted: TypedContractEvent<
      AssetMintedEvent.InputTuple,
      AssetMintedEvent.OutputTuple,
      AssetMintedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
