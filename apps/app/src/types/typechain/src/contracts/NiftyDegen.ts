/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers6';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export declare namespace NiftyLeagueCharacter {
  export type CharacterTraitsStruct = {
    tribe: BigNumberish;
    skinColor: BigNumberish;
    furColor: BigNumberish;
    eyeColor: BigNumberish;
    pupilColor: BigNumberish;
    hair: BigNumberish;
    mouth: BigNumberish;
    beard: BigNumberish;
    top: BigNumberish;
    outerwear: BigNumberish;
    print: BigNumberish;
    bottom: BigNumberish;
    footwear: BigNumberish;
    belt: BigNumberish;
    hat: BigNumberish;
    eyewear: BigNumberish;
    piercing: BigNumberish;
    wrist: BigNumberish;
    hands: BigNumberish;
    neckwear: BigNumberish;
    leftItem: BigNumberish;
    rightItem: BigNumberish;
  };

  export type CharacterTraitsStructOutput = [
    tribe: bigint,
    skinColor: bigint,
    furColor: bigint,
    eyeColor: bigint,
    pupilColor: bigint,
    hair: bigint,
    mouth: bigint,
    beard: bigint,
    top: bigint,
    outerwear: bigint,
    print: bigint,
    bottom: bigint,
    footwear: bigint,
    belt: bigint,
    hat: bigint,
    eyewear: bigint,
    piercing: bigint,
    wrist: bigint,
    hands: bigint,
    neckwear: bigint,
    leftItem: bigint,
    rightItem: bigint,
  ] & {
    tribe: bigint;
    skinColor: bigint;
    furColor: bigint;
    eyeColor: bigint;
    pupilColor: bigint;
    hair: bigint;
    mouth: bigint;
    beard: bigint;
    top: bigint;
    outerwear: bigint;
    print: bigint;
    bottom: bigint;
    footwear: bigint;
    belt: bigint;
    hat: bigint;
    eyewear: bigint;
    piercing: bigint;
    wrist: bigint;
    hands: bigint;
    neckwear: bigint;
    leftItem: bigint;
    rightItem: bigint;
  };
}

export interface NiftyDegenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'MAX_SUPPLY'
      | 'NAME_CHANGE_PRICE'
      | 'SPECIAL_CHARACTERS'
      | 'approve'
      | 'balanceOf'
      | 'changeName'
      | 'getApproved'
      | 'getCharacterTraits'
      | 'getNFTPrice'
      | 'getName'
      | 'getRemovedTraits'
      | 'initPoolSizes'
      | 'isApprovedForAll'
      | 'isAvailableAndAllowedTrait'
      | 'isAvailableTrait'
      | 'isNameReserved'
      | 'isUnique'
      | 'name'
      | 'overrideMintPrice'
      | 'owner'
      | 'ownerOf'
      | 'pauseMinting'
      | 'paused'
      | 'purchase'
      | 'renounceOwnership'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setBaseURI'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unpauseMinting'
      | 'validateName'
      | 'withdraw',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'Approval'
      | 'ApprovalForAll'
      | 'NameUpdated'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'Transfer'
      | 'Unpaused',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'MAX_SUPPLY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NAME_CHANGE_PRICE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SPECIAL_CHARACTERS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'changeName', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getCharacterTraits', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getNFTPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getName', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRemovedTraits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initPoolSizes', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'isAvailableAndAllowedTrait', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isAvailableTrait', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isNameReserved', values: [string]): string;
  encodeFunctionData(functionFragment: 'isUnique', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'overrideMintPrice', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pauseMinting', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'purchase',
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish[],
      BigNumberish[],
      [BigNumberish, BigNumberish],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [AddressLike, AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
  encodeFunctionData(functionFragment: 'setBaseURI', values: [string]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'unpauseMinting', values?: undefined): string;
  encodeFunctionData(functionFragment: 'validateName', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAX_SUPPLY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NAME_CHANGE_PRICE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SPECIAL_CHARACTERS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCharacterTraits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNFTPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRemovedTraits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initPoolSizes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isAvailableAndAllowedTrait', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isAvailableTrait', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isNameReserved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isUnique', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'overrideMintPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseMinting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpauseMinting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validateName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
  export type OutputTuple = [owner: string, operator: string, approved: boolean];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, previousName: string, newName: string];
  export type OutputTuple = [tokenId: bigint, previousName: string, newName: string];
  export interface OutputObject {
    tokenId: bigint;
    previousName: string;
    newName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NiftyDegen extends BaseContract {
  connect(runner?: ContractRunner | null): NiftyDegen;
  waitForDeployment(): Promise<this>;

  interface: NiftyDegenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  MAX_SUPPLY: TypedContractMethod<[], [bigint], 'view'>;

  NAME_CHANGE_PRICE: TypedContractMethod<[], [bigint], 'view'>;

  SPECIAL_CHARACTERS: TypedContractMethod<[], [bigint], 'view'>;

  approve: TypedContractMethod<[to: AddressLike, tokenId: BigNumberish], [void], 'nonpayable'>;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  changeName: TypedContractMethod<[tokenId: BigNumberish, newName: string], [string], 'nonpayable'>;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  getCharacterTraits: TypedContractMethod<
    [tokenId: BigNumberish],
    [NiftyLeagueCharacter.CharacterTraitsStructOutput],
    'view'
  >;

  getNFTPrice: TypedContractMethod<[], [bigint], 'view'>;

  getName: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  getRemovedTraits: TypedContractMethod<[], [bigint[]], 'view'>;

  initPoolSizes: TypedContractMethod<[], [void], 'nonpayable'>;

  isApprovedForAll: TypedContractMethod<[owner: AddressLike, operator: AddressLike], [boolean], 'view'>;

  isAvailableAndAllowedTrait: TypedContractMethod<[tribe: BigNumberish, trait: BigNumberish], [boolean], 'view'>;

  isAvailableTrait: TypedContractMethod<[trait: BigNumberish], [boolean], 'view'>;

  isNameReserved: TypedContractMethod<[nameString: string], [boolean], 'view'>;

  isUnique: TypedContractMethod<[traitCombo: BigNumberish], [boolean], 'view'>;

  name: TypedContractMethod<[], [string], 'view'>;

  overrideMintPrice: TypedContractMethod<[newPrice: BigNumberish], [void], 'nonpayable'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  pauseMinting: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  purchase: TypedContractMethod<
    [
      character: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      head: [BigNumberish, BigNumberish, BigNumberish],
      clothing: BigNumberish[],
      accessories: BigNumberish[],
      items: [BigNumberish, BigNumberish],
    ],
    [void],
    'payable'
  >;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  'safeTransferFrom(address,address,uint256)': TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;

  'safeTransferFrom(address,address,uint256,bytes)': TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike],
    [void],
    'nonpayable'
  >;

  setApprovalForAll: TypedContractMethod<[operator: AddressLike, approved: boolean], [void], 'nonpayable'>;

  setBaseURI: TypedContractMethod<[baseURI: string], [void], 'nonpayable'>;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;

  symbol: TypedContractMethod<[], [string], 'view'>;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  transferFrom: TypedContractMethod<[from: AddressLike, to: AddressLike, tokenId: BigNumberish], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  unpauseMinting: TypedContractMethod<[], [void], 'nonpayable'>;

  validateName: TypedContractMethod<[newName: string], [boolean], 'view'>;

  withdraw: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'MAX_SUPPLY'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'NAME_CHANGE_PRICE'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'SPECIAL_CHARACTERS'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'approve',
  ): TypedContractMethod<[to: AddressLike, tokenId: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'changeName',
  ): TypedContractMethod<[tokenId: BigNumberish, newName: string], [string], 'nonpayable'>;
  getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getCharacterTraits',
  ): TypedContractMethod<[tokenId: BigNumberish], [NiftyLeagueCharacter.CharacterTraitsStructOutput], 'view'>;
  getFunction(nameOrSignature: 'getNFTPrice'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getName'): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(nameOrSignature: 'getRemovedTraits'): TypedContractMethod<[], [bigint[]], 'view'>;
  getFunction(nameOrSignature: 'initPoolSizes'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'isApprovedForAll',
  ): TypedContractMethod<[owner: AddressLike, operator: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isAvailableAndAllowedTrait',
  ): TypedContractMethod<[tribe: BigNumberish, trait: BigNumberish], [boolean], 'view'>;
  getFunction(nameOrSignature: 'isAvailableTrait'): TypedContractMethod<[trait: BigNumberish], [boolean], 'view'>;
  getFunction(nameOrSignature: 'isNameReserved'): TypedContractMethod<[nameString: string], [boolean], 'view'>;
  getFunction(nameOrSignature: 'isUnique'): TypedContractMethod<[traitCombo: BigNumberish], [boolean], 'view'>;
  getFunction(nameOrSignature: 'name'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'overrideMintPrice',
  ): TypedContractMethod<[newPrice: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(nameOrSignature: 'pauseMinting'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'paused'): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'purchase',
  ): TypedContractMethod<
    [
      character: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      head: [BigNumberish, BigNumberish, BigNumberish],
      clothing: BigNumberish[],
      accessories: BigNumberish[],
      items: [BigNumberish, BigNumberish],
    ],
    [void],
    'payable'
  >;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'safeTransferFrom(address,address,uint256)',
  ): TypedContractMethod<[from: AddressLike, to: AddressLike, tokenId: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setApprovalForAll',
  ): TypedContractMethod<[operator: AddressLike, approved: boolean], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'setBaseURI'): TypedContractMethod<[baseURI: string], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'symbol'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transferFrom',
  ): TypedContractMethod<[from: AddressLike, to: AddressLike, tokenId: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'unpauseMinting'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'validateName'): TypedContractMethod<[newName: string], [boolean], 'view'>;
  getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<[], [void], 'nonpayable'>;

  getEvent(
    key: 'Approval',
  ): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
  getEvent(
    key: 'ApprovalForAll',
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: 'NameUpdated',
  ): TypedContractEvent<NameUpdatedEvent.InputTuple, NameUpdatedEvent.OutputTuple, NameUpdatedEvent.OutputObject>;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
  getEvent(
    key: 'Transfer',
  ): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
  getEvent(
    key: 'Unpaused',
  ): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

  filters: {
    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;

    'ApprovalForAll(address,address,bool)': TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    'NameUpdated(uint256,string,string)': TypedContractEvent<
      NameUpdatedEvent.InputTuple,
      NameUpdatedEvent.OutputTuple,
      NameUpdatedEvent.OutputObject
    >;
    NameUpdated: TypedContractEvent<
      NameUpdatedEvent.InputTuple,
      NameUpdatedEvent.OutputTuple,
      NameUpdatedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
  };
}
