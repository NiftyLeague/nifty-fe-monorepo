/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers6';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface IERC20MetaTransactionsInterface extends Interface {
  getFunction(nameOrSignature: 'executeMetaTransaction' | 'getNonce' | 'invalidateNext'): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'MetaTransactionExecuted'): EventFragment;

  encodeFunctionData(
    functionFragment: 'executeMetaTransaction',
    values: [AddressLike, BytesLike, BytesLike, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getNonce', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'invalidateNext', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'executeMetaTransaction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'invalidateNext', data: BytesLike): Result;
}

export namespace MetaTransactionExecutedEvent {
  export type InputTuple = [userAddress: AddressLike, relayerAddress: AddressLike, functionSignature: BytesLike];
  export type OutputTuple = [userAddress: string, relayerAddress: string, functionSignature: string];
  export interface OutputObject {
    userAddress: string;
    relayerAddress: string;
    functionSignature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC20MetaTransactions extends BaseContract {
  connect(runner?: ContractRunner | null): IERC20MetaTransactions;
  waitForDeployment(): Promise<this>;

  interface: IERC20MetaTransactionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  executeMetaTransaction: TypedContractMethod<
    [userAddress: AddressLike, functionSignature: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish],
    [string],
    'nonpayable'
  >;

  getNonce: TypedContractMethod<[user: AddressLike], [bigint], 'view'>;

  invalidateNext: TypedContractMethod<[offset: BigNumberish], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'executeMetaTransaction',
  ): TypedContractMethod<
    [userAddress: AddressLike, functionSignature: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish],
    [string],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'getNonce'): TypedContractMethod<[user: AddressLike], [bigint], 'view'>;
  getFunction(nameOrSignature: 'invalidateNext'): TypedContractMethod<[offset: BigNumberish], [void], 'nonpayable'>;

  getEvent(
    key: 'MetaTransactionExecuted',
  ): TypedContractEvent<
    MetaTransactionExecutedEvent.InputTuple,
    MetaTransactionExecutedEvent.OutputTuple,
    MetaTransactionExecutedEvent.OutputObject
  >;

  filters: {
    'MetaTransactionExecuted(address,address,bytes)': TypedContractEvent<
      MetaTransactionExecutedEvent.InputTuple,
      MetaTransactionExecutedEvent.OutputTuple,
      MetaTransactionExecutedEvent.OutputObject
    >;
    MetaTransactionExecuted: TypedContractEvent<
      MetaTransactionExecutedEvent.InputTuple,
      MetaTransactionExecutedEvent.OutputTuple,
      MetaTransactionExecutedEvent.OutputObject
    >;
  };
}
