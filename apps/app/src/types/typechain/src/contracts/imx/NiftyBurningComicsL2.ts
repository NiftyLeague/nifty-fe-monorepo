/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers6';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface NiftyBurningComicsL2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | 'burnComics'
      | 'comics'
      | 'initialize'
      | 'itemIdByTokenId'
      | 'itemIndex'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'renounceOwnership'
      | 'transferOwnership'
      | 'unpause',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'ComicsBurned'
      | 'Initialized'
      | 'ItemMinted'
      | 'KeyMinted'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'Unpaused',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'burnComics', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'comics', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'itemIdByTokenId', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'itemIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'burnComics', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comics', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'itemIdByTokenId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'itemIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
}

export namespace ComicsBurnedEvent {
  export type InputTuple = [by: AddressLike, tokenIds: BigNumberish[], values: BigNumberish[]];
  export type OutputTuple = [by: string, tokenIds: bigint[], values: bigint[]];
  export interface OutputObject {
    by: string;
    tokenIds: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemMintedEvent {
  export type InputTuple = [
    by: AddressLike,
    tokenIds: BigNumberish[],
    values: BigNumberish[],
    startIdForIMX: BigNumberish[],
  ];
  export type OutputTuple = [by: string, tokenIds: bigint[], values: bigint[], startIdForIMX: bigint[]];
  export interface OutputObject {
    by: string;
    tokenIds: bigint[];
    values: bigint[];
    startIdForIMX: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyMintedEvent {
  export type InputTuple = [by: AddressLike, tokenId: BigNumberish, value: BigNumberish, startIdForIMX: BigNumberish];
  export type OutputTuple = [by: string, tokenId: bigint, value: bigint, startIdForIMX: bigint];
  export interface OutputObject {
    by: string;
    tokenId: bigint;
    value: bigint;
    startIdForIMX: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NiftyBurningComicsL2 extends BaseContract {
  connect(runner?: ContractRunner | null): NiftyBurningComicsL2;
  waitForDeployment(): Promise<this>;

  interface: NiftyBurningComicsL2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  burnComics: TypedContractMethod<[_values: BigNumberish[]], [void], 'nonpayable'>;

  comics: TypedContractMethod<[], [string], 'view'>;

  initialize: TypedContractMethod<[_comics: AddressLike], [void], 'nonpayable'>;

  itemIdByTokenId: TypedContractMethod<[arg0: BigNumberish], [bigint], 'view'>;

  itemIndex: TypedContractMethod<[], [bigint], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'burnComics'): TypedContractMethod<[_values: BigNumberish[]], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'comics'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'initialize'): TypedContractMethod<[_comics: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'itemIdByTokenId'): TypedContractMethod<[arg0: BigNumberish], [bigint], 'view'>;
  getFunction(nameOrSignature: 'itemIndex'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'pause'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'paused'): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'unpause'): TypedContractMethod<[], [void], 'nonpayable'>;

  getEvent(
    key: 'ComicsBurned',
  ): TypedContractEvent<ComicsBurnedEvent.InputTuple, ComicsBurnedEvent.OutputTuple, ComicsBurnedEvent.OutputObject>;
  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
  getEvent(
    key: 'ItemMinted',
  ): TypedContractEvent<ItemMintedEvent.InputTuple, ItemMintedEvent.OutputTuple, ItemMintedEvent.OutputObject>;
  getEvent(
    key: 'KeyMinted',
  ): TypedContractEvent<KeyMintedEvent.InputTuple, KeyMintedEvent.OutputTuple, KeyMintedEvent.OutputObject>;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
  getEvent(
    key: 'Unpaused',
  ): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

  filters: {
    'ComicsBurned(address,uint256[],uint256[])': TypedContractEvent<
      ComicsBurnedEvent.InputTuple,
      ComicsBurnedEvent.OutputTuple,
      ComicsBurnedEvent.OutputObject
    >;
    ComicsBurned: TypedContractEvent<
      ComicsBurnedEvent.InputTuple,
      ComicsBurnedEvent.OutputTuple,
      ComicsBurnedEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'ItemMinted(address,uint256[],uint256[],uint256[])': TypedContractEvent<
      ItemMintedEvent.InputTuple,
      ItemMintedEvent.OutputTuple,
      ItemMintedEvent.OutputObject
    >;
    ItemMinted: TypedContractEvent<
      ItemMintedEvent.InputTuple,
      ItemMintedEvent.OutputTuple,
      ItemMintedEvent.OutputObject
    >;

    'KeyMinted(address,uint256,uint256,uint256)': TypedContractEvent<
      KeyMintedEvent.InputTuple,
      KeyMintedEvent.OutputTuple,
      KeyMintedEvent.OutputObject
    >;
    KeyMinted: TypedContractEvent<KeyMintedEvent.InputTuple, KeyMintedEvent.OutputTuple, KeyMintedEvent.OutputObject>;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
  };
}
