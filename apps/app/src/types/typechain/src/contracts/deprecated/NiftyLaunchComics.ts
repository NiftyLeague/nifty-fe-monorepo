/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers6';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface NiftyLaunchComicsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'DEFAULT_ADMIN_ROLE'
      | 'MINTER_ROLE'
      | 'NAME'
      | 'PAUSER_ROLE'
      | 'SYMBOL'
      | 'balanceOf'
      | 'balanceOfBatch'
      | 'burn'
      | 'burnBatch'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'isApprovedForAll'
      | 'mint'
      | 'mintBatch'
      | 'pauseBurn'
      | 'paused'
      | 'renounceRole'
      | 'revokeRole'
      | 'safeBatchTransferFrom'
      | 'safeTransferFrom'
      | 'setApprovalForAll'
      | 'setURI'
      | 'supportsInterface'
      | 'unpauseBurn'
      | 'uri',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'ApprovalForAll'
      | 'Paused'
      | 'RoleAdminChanged'
      | 'RoleGranted'
      | 'RoleRevoked'
      | 'TransferBatch'
      | 'TransferSingle'
      | 'URI'
      | 'Unpaused',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINTER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PAUSER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SYMBOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOfBatch', values: [AddressLike[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'burn', values: [AddressLike, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'burnBatch', values: [AddressLike, BigNumberish[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'mint', values: [AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'mintBatch',
    values: [AddressLike, BigNumberish[], BigNumberish[], BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'pauseBurn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [AddressLike, AddressLike, BigNumberish[], BigNumberish[], BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
  encodeFunctionData(functionFragment: 'setURI', values: [string]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'unpauseBurn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINTER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PAUSER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SYMBOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpauseBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [account: AddressLike, operator: AddressLike, approved: boolean];
  export type OutputTuple = [account: string, operator: string, approved: boolean];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
  export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[],
  ];
  export type OutputTuple = [operator: string, from: string, to: string, ids: bigint[], values: bigint[]];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish,
  ];
  export type OutputTuple = [operator: string, from: string, to: string, id: bigint, value: bigint];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NiftyLaunchComics extends BaseContract {
  connect(runner?: ContractRunner | null): NiftyLaunchComics;
  waitForDeployment(): Promise<this>;

  interface: NiftyLaunchComicsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], 'view'>;

  MINTER_ROLE: TypedContractMethod<[], [string], 'view'>;

  NAME: TypedContractMethod<[], [string], 'view'>;

  PAUSER_ROLE: TypedContractMethod<[], [string], 'view'>;

  SYMBOL: TypedContractMethod<[], [string], 'view'>;

  balanceOf: TypedContractMethod<[account: AddressLike, id: BigNumberish], [bigint], 'view'>;

  balanceOfBatch: TypedContractMethod<[accounts: AddressLike[], ids: BigNumberish[]], [bigint[]], 'view'>;

  burn: TypedContractMethod<[account: AddressLike, id: BigNumberish, value: BigNumberish], [void], 'nonpayable'>;

  burnBatch: TypedContractMethod<
    [account: AddressLike, ids: BigNumberish[], values: BigNumberish[]],
    [void],
    'nonpayable'
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], 'view'>;

  grantRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;

  hasRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], 'view'>;

  isApprovedForAll: TypedContractMethod<[account: AddressLike, operator: AddressLike], [boolean], 'view'>;

  mint: TypedContractMethod<
    [to: AddressLike, id: BigNumberish, amount: BigNumberish, data: BytesLike],
    [void],
    'nonpayable'
  >;

  mintBatch: TypedContractMethod<
    [to: AddressLike, ids: BigNumberish[], amounts: BigNumberish[], data: BytesLike],
    [void],
    'nonpayable'
  >;

  pauseBurn: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  renounceRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;

  revokeRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;

  safeBatchTransferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, ids: BigNumberish[], amounts: BigNumberish[], data: BytesLike],
    [void],
    'nonpayable'
  >;

  safeTransferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish, amount: BigNumberish, data: BytesLike],
    [void],
    'nonpayable'
  >;

  setApprovalForAll: TypedContractMethod<[operator: AddressLike, approved: boolean], [void], 'nonpayable'>;

  setURI: TypedContractMethod<[newuri: string], [void], 'nonpayable'>;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;

  unpauseBurn: TypedContractMethod<[], [void], 'nonpayable'>;

  uri: TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'MINTER_ROLE'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'NAME'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'PAUSER_ROLE'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'SYMBOL'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'balanceOf',
  ): TypedContractMethod<[account: AddressLike, id: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'balanceOfBatch',
  ): TypedContractMethod<[accounts: AddressLike[], ids: BigNumberish[]], [bigint[]], 'view'>;
  getFunction(
    nameOrSignature: 'burn',
  ): TypedContractMethod<[account: AddressLike, id: BigNumberish, value: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'burnBatch',
  ): TypedContractMethod<[account: AddressLike, ids: BigNumberish[], values: BigNumberish[]], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<[role: BytesLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'grantRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'hasRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isApprovedForAll',
  ): TypedContractMethod<[account: AddressLike, operator: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'mint',
  ): TypedContractMethod<
    [to: AddressLike, id: BigNumberish, amount: BigNumberish, data: BytesLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'mintBatch',
  ): TypedContractMethod<
    [to: AddressLike, ids: BigNumberish[], amounts: BigNumberish[], data: BytesLike],
    [void],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'pauseBurn'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'paused'): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'renounceRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'revokeRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'safeBatchTransferFrom',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, ids: BigNumberish[], amounts: BigNumberish[], data: BytesLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'safeTransferFrom',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish, amount: BigNumberish, data: BytesLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setApprovalForAll',
  ): TypedContractMethod<[operator: AddressLike, approved: boolean], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'setURI'): TypedContractMethod<[newuri: string], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'unpauseBurn'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'uri'): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;

  getEvent(
    key: 'ApprovalForAll',
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
  getEvent(
    key: 'RoleAdminChanged',
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleGranted',
  ): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
  getEvent(
    key: 'RoleRevoked',
  ): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
  getEvent(
    key: 'TransferBatch',
  ): TypedContractEvent<TransferBatchEvent.InputTuple, TransferBatchEvent.OutputTuple, TransferBatchEvent.OutputObject>;
  getEvent(
    key: 'TransferSingle',
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(key: 'URI'): TypedContractEvent<URIEvent.InputTuple, URIEvent.OutputTuple, URIEvent.OutputObject>;
  getEvent(
    key: 'Unpaused',
  ): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

  filters: {
    'ApprovalForAll(address,address,bool)': TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;

    'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    'RoleGranted(bytes32,address,address)': TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    'RoleRevoked(bytes32,address,address)': TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    'TransferBatch(address,address,address,uint256[],uint256[])': TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    'TransferSingle(address,address,address,uint256,uint256)': TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    'URI(string,uint256)': TypedContractEvent<URIEvent.InputTuple, URIEvent.OutputTuple, URIEvent.OutputObject>;
    URI: TypedContractEvent<URIEvent.InputTuple, URIEvent.OutputTuple, URIEvent.OutputObject>;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
  };
}
