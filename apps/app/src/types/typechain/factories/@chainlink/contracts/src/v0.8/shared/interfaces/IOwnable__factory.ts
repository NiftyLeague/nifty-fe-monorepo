/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers';
import type {
  IOwnable,
  IOwnableInterface,
} from '../../../../../../../@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable';

const _abi = [
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IOwnable__factory {
  static readonly abi = _abi;
  static createInterface(): IOwnableInterface {
    return new Interface(_abi) as IOwnableInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IOwnable {
    return new Contract(address, _abi, runner) as unknown as IOwnable;
  }
}
