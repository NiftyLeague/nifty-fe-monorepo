/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers6';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers6';
import type { NonPayableOverrides } from '../../../../common';
import type { MockStarkExchange, MockStarkExchangeInterface } from '../../../../src/contracts/mocks/MockStarkExchange';

const _abi = [
  { inputs: [], name: 'DepositAmountMustBeGreaterThanZero', type: 'error' },
  { inputs: [], name: 'InsufficientBalance', type: 'error' },
  { inputs: [], name: 'WithdrawalAmountMustBeGreaterThanZero', type: 'error' },
  { inputs: [], name: 'deposit', outputs: [], stateMutability: 'payable', type: 'function' },
  {
    inputs: [{ internalType: 'uint256', name: 'amount', type: 'uint256' }],
    name: 'withdraw',
    outputs: [
      { internalType: 'bool', name: 'success', type: 'bool' },
      { internalType: 'bytes', name: 'data', type: 'bytes' },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b50610266806100206000396000f3fe6080604052600436106100295760003560e01c80632e1a7d4d1461002e578063d0e30db014610065575b600080fd5b34801561003a57600080fd5b5061004e61004936600461017d565b61006f565b60405161005c929190610196565b60405180910390f35b61006d610136565b005b60006060826000036100935760405162013f6b60e91b815260040160405180910390fd5b336000908152602081905260409020548311156100c357604051631e9acf1760e31b815260040160405180910390fd5b33600090815260208190526040812080548592906100e2908490610204565b909155505060405133908490600081818185875af1925050503d8060008114610127576040519150601f19603f3d011682016040523d82523d6000602084013e61012c565b606091505b5091509150915091565b34600003610157576040516332bba7b160e11b815260040160405180910390fd5b336000908152602081905260408120805434929061017690849061021d565b9091555050565b60006020828403121561018f57600080fd5b5035919050565b821515815260006020604081840152835180604085015260005b818110156101cc578581018301518582016060015282016101b0565b506000606082860101526060601f19601f830116850101925050509392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610217576102176101ee565b92915050565b80820180821115610217576102176101ee56fea2646970667358221220cbc61a687e81e1b446e3bf3d909c21fe3a5344cef2a5acd8cbe9840cd8084adf64736f6c63430008130033';

type MockStarkExchangeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockStarkExchangeConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockStarkExchange__factory extends ContractFactory {
  constructor(...args: MockStarkExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockStarkExchange & { deploymentTransaction(): ContractTransactionResponse }
    >;
  }
  override connect(runner: ContractRunner | null): MockStarkExchange__factory {
    return super.connect(runner) as MockStarkExchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStarkExchangeInterface {
    return new Interface(_abi) as MockStarkExchangeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockStarkExchange {
    return new Contract(address, _abi, runner) as unknown as MockStarkExchange;
  }
}
