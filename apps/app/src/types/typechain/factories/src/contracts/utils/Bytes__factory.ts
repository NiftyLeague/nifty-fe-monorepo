/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers6';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers6';
import type { NonPayableOverrides } from '../../../../common';
import type { Bytes, BytesInterface } from '../../../../src/contracts/utils/Bytes';

const _abi = [
  { inputs: [], name: 'InvalidInput', type: 'error' },
  {
    inputs: [],
    name: 'alphabet',
    outputs: [{ internalType: 'bytes', name: '', type: 'bytes' }],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60fc610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063c3ace0e3146038575b600080fd5b60666040518060400160405280601081526020016f181899199a1a9b1b9c1cb0b131b232b360811b81525081565b60405160719190607a565b60405180910390f35b600060208083528351808285015260005b8181101560a557858101830151858201604001528201608b565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220d7d51f5072f4f5d176d735193c537cb7d8597b81b1bd32cf7a18fb35dc51781164736f6c63430008130033';

type BytesConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: BytesConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bytes__factory extends ContractFactory {
  constructor(...args: BytesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<Bytes & { deploymentTransaction(): ContractTransactionResponse }>;
  }
  override connect(runner: ContractRunner | null): Bytes__factory {
    return super.connect(runner) as Bytes__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BytesInterface {
    return new Interface(_abi) as BytesInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Bytes {
    return new Contract(address, _abi, runner) as unknown as Bytes;
  }
}
