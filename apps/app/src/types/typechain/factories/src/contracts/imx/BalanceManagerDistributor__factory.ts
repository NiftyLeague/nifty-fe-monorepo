/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers6';
import type { Signer, BytesLike, BigNumberish, AddressLike, ContractDeployTransaction, ContractRunner } from 'ethers6';
import type { NonPayableOverrides } from '../../../../common';
import type {
  BalanceManagerDistributor,
  BalanceManagerDistributorInterface,
} from '../../../../src/contracts/imx/BalanceManagerDistributor';

const _abi = [
  {
    inputs: [
      { internalType: 'address', name: 'token_', type: 'address' },
      { internalType: 'bytes32', name: 'merkleRoot_', type: 'bytes32' },
      { internalType: 'uint256', name: 'endTime_', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  { inputs: [], name: 'AlreadyClaimed', type: 'error' },
  { inputs: [], name: 'ClaimWindowFinished', type: 'error' },
  { inputs: [], name: 'EndTimeInPast', type: 'error' },
  { inputs: [], name: 'InvalidProof', type: 'error' },
  { inputs: [], name: 'NoWithdrawDuringClaim', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'index', type: 'uint256' },
      { indexed: false, internalType: 'address', name: 'account', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'Claimed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'previousOwner', type: 'address' },
      { indexed: true, internalType: 'address', name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'index', type: 'uint256' },
      { internalType: 'address', name: 'account', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
      { internalType: 'bytes32[]', name: 'merkleProof', type: 'bytes32[]' },
    ],
    name: 'claim',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'endTime',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'index', type: 'uint256' }],
    name: 'isClaimed',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'merkleRoot',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  { inputs: [], name: 'renounceOwnership', outputs: [], stateMutability: 'nonpayable', type: 'function' },
  {
    inputs: [],
    name: 'token',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  { inputs: [], name: 'withdraw', outputs: [], stateMutability: 'nonpayable', type: 'function' },
] as const;

const _bytecode =
  '0x60e060405234801561001057600080fd5b50604051610d35380380610d3583398101604081905261002f916100cd565b6001600160a01b03831660805260a082905282828261004d3361007b565b42811161006d576040516372e54d4d60e01b815260040160405180910390fd5b60c052506101109350505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000606084860312156100e257600080fd5b83516001600160a01b03811681146100f957600080fd5b602085015160409095015190969495509392505050565b60805160a05160c051610bce6101676000396000818160ec015281816101a201526101ff01526000818160b2015261047701526000818161017e01528181610261015281816102d601526104d50152610bce6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101165780638da5cb5b1461011e5780639e34070f14610143578063f2fde38b14610166578063fc0c546a1461017957600080fd5b80632e7ba6ef146100985780632eb4a7ab146100ad5780633197cbb6146100e75780633ccfd60b1461010e575b600080fd5b6100ab6100a63660046109a4565b6101a0565b005b6100d47f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100d47f000000000000000000000000000000000000000000000000000000000000000081565b6100ab6101f5565b6100ab6102ff565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100de565b610156610151366004610a3b565b610311565b60405190151581526020016100de565b6100ab610174366004610a54565b610352565b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000004211156101e15760405163d365f61160e01b815260040160405180910390fd5b6101ee85858585856103d0565b5050505050565b6101fd61054d565b7f000000000000000000000000000000000000000000000000000000000000000042101561023e57604051630ee56a2b60e41b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526102fd9033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156102a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cc9190610a6f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906105a7565b565b61030761054d565b6102fd60006105fe565b60008061032061010084610a9e565b9050600061033061010085610ab2565b60009283526020839052604090922054600190921b9182169091149392505050565b61035a61054d565b6001600160a01b0381166103c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103cd816105fe565b50565b6103d985610311565b156103f757604051630c8d9eab60e31b815260040160405180910390fd5b60408051602081018790526bffffffffffffffffffffffff19606087901b1691810191909152605481018490526000906074016040516020818303038152906040528051906020012090506104a28383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508591506106509050565b6104bf576040516309bde33960e01b815260040160405180910390fd5b6104c886610666565b6104fc6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866105a7565b604080518781526001600160a01b03871660208201529081018590527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0269060600160405180910390a1505050505050565b6001546001600160a01b031633146102fd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103bb565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105f99084906106a4565b505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008261065d8584610779565b14949350505050565b600061067461010083610a9e565b9050600061068461010084610ab2565b6000928352602083905260409092208054600190931b9092179091555050565b60006106f9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107c69092919063ffffffff16565b905080516000148061071a57508080602001905181019061071a9190610ac6565b6105f95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103bb565b600081815b84518110156107be576107aa8286838151811061079d5761079d610ae8565b60200260200101516107dd565b9150806107b681610afe565b91505061077e565b509392505050565b60606107d5848460008561080f565b949350505050565b60008183106107f9576000828152602084905260409020610808565b60008381526020839052604090205b9392505050565b6060824710156108705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103bb565b600080866001600160a01b0316858760405161088c9190610b49565b60006040518083038185875af1925050503d80600081146108c9576040519150601f19603f3d011682016040523d82523d6000602084013e6108ce565b606091505b50915091506108df878383876108ea565b979650505050505050565b60608315610959578251600003610952576001600160a01b0385163b6109525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103bb565b50816107d5565b6107d5838381511561096e5781518083602001fd5b8060405162461bcd60e51b81526004016103bb9190610b65565b80356001600160a01b038116811461099f57600080fd5b919050565b6000806000806000608086880312156109bc57600080fd5b853594506109cc60208701610988565b935060408601359250606086013567ffffffffffffffff808211156109f057600080fd5b818801915088601f830112610a0457600080fd5b813581811115610a1357600080fd5b8960208260051b8501011115610a2857600080fd5b9699959850939650602001949392505050565b600060208284031215610a4d57600080fd5b5035919050565b600060208284031215610a6657600080fd5b61080882610988565b600060208284031215610a8157600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082610aad57610aad610a88565b500490565b600082610ac157610ac1610a88565b500690565b600060208284031215610ad857600080fd5b8151801515811461080857600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610b1e57634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b83811015610b40578181015183820152602001610b28565b50506000910152565b60008251610b5b818460208701610b25565b9190910192915050565b6020815260008251806020840152610b84816040850160208701610b25565b601f01601f1916919091016040019291505056fea26469706673582212207ed8e8b6a10cf5e19b833af604a4f58f44381c358ce80c5e44db9b9e8b7f0a5364736f6c63430008130033';

type BalanceManagerDistributorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalanceManagerDistributorConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalanceManagerDistributor__factory extends ContractFactory {
  constructor(...args: BalanceManagerDistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    token_: AddressLike,
    merkleRoot_: BytesLike,
    endTime_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(token_, merkleRoot_, endTime_, overrides || {});
  }
  override deploy(
    token_: AddressLike,
    merkleRoot_: BytesLike,
    endTime_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string },
  ) {
    return super.deploy(token_, merkleRoot_, endTime_, overrides || {}) as Promise<
      BalanceManagerDistributor & { deploymentTransaction(): ContractTransactionResponse }
    >;
  }
  override connect(runner: ContractRunner | null): BalanceManagerDistributor__factory {
    return super.connect(runner) as BalanceManagerDistributor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalanceManagerDistributorInterface {
    return new Interface(_abi) as BalanceManagerDistributorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BalanceManagerDistributor {
    return new Contract(address, _abi, runner) as unknown as BalanceManagerDistributor;
  }
}
